#!/usr/bin/env python3
"""
An internal git wrapper to simplify the handling of submodules.
"""
import atexit
import os
import readline
from subprocess import run
import sys

from colorama import Fore, Style

from xg import find_command, command_help

# Load the command modules to register their commands.
from xg import base, branches, commits, submodules


def init_readline() -> None:
    histfile = os.path.join(os.path.expanduser("~"), ".xg_history")
    try:
        readline.read_history_file(histfile)
        # default history len is -1 (infinite), which may grow unruly
        readline.set_history_length(1000)
    except FileNotFoundError:
        pass

    atexit.register(readline.write_history_file, histfile)


def main(args) -> int:
    """Main function."""
    if len(args) <= 1:
        command_help()
        return 1
    init_readline()
    if (command := find_command(args[1])) is not None:
        try:
            return command(*args[2:])
        except TypeError:
            print(f"{Fore.YELLOW}Nombre d'arguments invalide.{Style.RESET_ALL}")
            command_help(args[1])
            return 1
    git = run(["git"] + args[1:])
    return git.returncode


if __name__ == "__main__":
    sys.exit(main(sys.argv))
